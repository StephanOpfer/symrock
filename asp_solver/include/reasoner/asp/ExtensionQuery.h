#pragma once

#include "reasoner/asp/Query.h"
#include "reasoner/asp/Term.h"

#include <memory>

namespace reasoner
{
namespace asp
{
class Solver;
class ExtensionQuery : public Query
{
public:
    ExtensionQuery(int queryID, Solver* solver, Term* term);
    ~ExtensionQuery() override = default;
    void removeExternal() override;
protected:
    /**
     * Encapsulates the query in an extra program section including an external (the query external, e.g., query1).
     * The query external is added to every rule in the query, in order to guard it: bla bla :- blub blub, query1.
     * Furthermore, it encapsulates queried rules/rule heads with a query1(...) in order to guarantee the module property.
     *
     * Therefore, it utilises the methods expandBlaBla() and createKBCapturingRule
     */
    virtual void generateQueryProgram();

    std::string createKBCapturingRule(const std::string& headPredicateName, int arity, const std::string& querySection);
    std::string expandFactModuleProperty(std::string fact);
    std::string expandRuleModuleProperty(const std::string& rule, const std::string& querySection);

    std::string queryProgram; /**< The program that is generated by 'generateQueryProgram*/
    std::string queryProgramSection;
    std::string externalName;
    std::shared_ptr<Clingo::Symbol> external;
};

} /* namespace asp */
} /* namespace reasoner */
